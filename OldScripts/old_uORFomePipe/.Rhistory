getwd()
data.table::fread(c("a:d", "b:e"), sep = ":")
data.table::fread(c("a:d", "b:e", "\n"), sep = ":")
data.table::fread(c("a:d\r", "b:e", "\n"), sep = ":")
?fread
data.table::fread(c("a:d\rb:e\n"), sep = ":")
data.table::fread("a:d\rb:e\n", sep = ":")
data.table::fread("a:d rb:e", sep = ":")
data.table::fread("a:d b:e", sep = ":")
library(uORFomePipe)
# updateORFik() # update if needed
library(uORFomePipe)
#set working dir correctly to ./RCode1/ location
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
# updateORFik() # update if needed
source("./uORFome/Init_variables.R")
# updateORFik() # update if needed
source("./uORFome/Init_Variables.R")
sessionInfo()
.libPaths()
1+1
setwd()
getwd()
library(uORFomePipe)
View(ORFik:::filterUORFs)
getFasta()
fa
rm(fa)
fa
getFasta()
dataBaseFolder <- p(mainFolder,"/dataBase")
setwd(dataBaseFolder)
uorfDB <- createDataBase("uorfCatalogue.sqlite")
uorfDB
uorfDB@flags
uorfDB@ref
uorfDB@ref$result
install.packages("h2o")
load(paste0("forests/predicateTables/table_cds3utr_",tissue,".rdata"))
tissue = "all"
load(paste0("forests/predicateTables/table_cds3utr_",tissue,".rdata"))
predicate
load(paste0("forests/finalPrediction_filtered",tissue, ".rdata"))
dt <- readTable("finalCAGEuORFPrediction")
dt
dt
sum(dt$Matrix)
startCodonMetrics(dt)
startCodonMetrics(dt$Matrix)
uorfData <- getAllSequenceFeaturesTable()
uorfData
hits <- dt$Matrix
# if(!exists("uorfTable")) uorfTable <-
ySeq <- rep(0, length(hits))
ySeq[hits] <- 1
StartResultsSequences <- chisq.test(table(data.frame(uorfData$StartCodons, prediction = as.factor(ySeq))))
StartResultsSequences
# prin(cbind(a[order(a[,2], decreasing = T),], relative = a[order(a[,2], decreasing = T),2]/max(a[,2])))
res <- round(StartResultsSequences$residuals,1)
res <- res[order(res[,2],decreasing = T),]
count <- table(uorfData$StartCodons[hits])[rownames(res)]
relativeCount <- round(table(uorfData$StartCodons[hits])/sum(hits), 2)[rownames(res)]
res <- cbind(res, relative = round(res[,2]/max(res[,2]), 2), count, relativeCount)
print(paste("number of uORFs predicted translated:", sum(hits)))
print(res)
res
# prin(cbind(a[order(a[,2], decreasing = T),], relative = a[order(a[,2], decreasing = T),2]/max(a[,2])))
res <- round(StartResultsSequences$residuals,1)
res
prediction
install.packages("VennDiagram")
getwd()
g <- rtracklayer::import.bed(con = "remapped_hisLeaders.bed")
work = "/export/valenfs/projects/uORFome/Supplemental_Data_Tables_.xlsx"
# old grch37 annotation
d <- read.xlsx(work, sheet = 6, colNames = T, startRow = 3)
library(openxlsx)
# old grch37 annotation
d <- read.xlsx(work, sheet = 6, colNames = T, startRow = 3)
d
View(d)
getwd()
strand <- d$strand
startSite <- as.integer(d$start_coordinate)
stopSite <- as.integer(d$end_coordinate)
transcript <- sub("\\..*","",d$uORF_ID)
chromosome <- d$chromosome
transcript
sta <- startSite
sta[strand == "-"] <- stopSite[strand == "-"]
sto <- stopSite
sto[strand == "-"] <- startSite[strand == "-"]
goodHits <- which(transcript %in% names(fiveUTRs))
getLeaders()
leaders
fiveUTRs
goodHits <- which(transcript %in% names(fiveUTRs))
sum(goodHits)
length(transcript)
length(goodHits)
length(fiveUTRs)
bed <- GRanges(seqnames = chromosome, ranges = IRanges(sta, sto), strand = strand, name = transcript, score = rep(0, length(name)))
bed <- GRanges(seqnames = chromosome, ranges = IRanges(sta, sto), strand = strand, name = transcript, score = rep(0, length(chromosome)))
bed
rtracklayer::export.bed(object = bed, con = "hisLeaders.bed") # now do conversion
print("@ NCBI Genome Remapping Service GrCH37 -> 38")
print("https://www.ncbi.nlm.nih.gov/genome/tools/remap")
my.name <- readline(prompt="Press enter when you finished remapping: ")
print("File: mcgilivray_uorfs.bed")
print("https://www.ncbi.nlm.nih.gov/genome/tools/remap")
print("Go to: https://www.ncbi.nlm.nih.gov/genome/tools/remap")
g <- rtracklayer::import.bed(con = "remapped_mcgilivray_uorfs.bed")
g
rm(g$score)
if( length(strand) != length(startSite) | length(strand) != length(transcript)){
stop("wrong input readings for others")
}
g$score
g$score <- NULL
g
startSitesOur <- startSites(grl[finalCagePred[order]], is.sorted = T)
grl <- getUorfsInDb()
grl
predicted <- readTable("finalCAGEuORFPrediction")
predicted
sum(predicted)
startSitesOur <- startSites(grl[predicted], is.sorted = T)
grl[predicted]
grl
predicted <- readTable("finalCAGEuORFPrediction")$Matrix
predicted[1]
startSitesOur <- startSites(grl[predicted], is.sorted = T)
startSitesOur[1:3]
grl <- grl[predicted]
startSitesOur <- startSites(grl, is.sorted = T)
#how many did we find ?
startsOur <- firstStartPerGroup(grl, keep.names = F)
head(startSitesOur)
View(g)
g
#how many did we find ?
startSitesOur <- startSites(grl, is.sorted = T, keep.names = FALSE)
stopsOur <- stopSites(grl, is.sorted = T, keep.names = FALSE)
strandOur <- strandPerGroup(grl, keep.names = F)
chromosomeOurs <- seqnamesPerGroup(grl, F)
startSites(g)
g
g <- rtracklayer::import.bed(con = "remapped_mcgilivray_uorfs.bed")
g
g$score <- NULL
#how many did we find ?
startSitesOur <- startSites(grl, is.sorted = T, keep.names = FALSE)
stopsOur <- stopSites(grl, is.sorted = T, keep.names = FALSE)
strandOur <- strandPerGroup(grl, keep.names = F)
chromosomeOurs <- seqnamesPerGroup(grl, F)
ours <- paste(startsOur, stopsOur, chromosomeOurs, strandOur)
g <- groupGRangesBy(gr, seq(length(gr)))
g <- groupGRangesBy(gr, seq(length(g)))
g <- groupGRangesBy(g, seq(length(g)))
g
theirs <- paste(startSites(g, is.sorted = T, keep.names = FALSE),
stopSites(g, is.sorted = T, keep.names = FALSE),
seqnames(g), as.character(strand(g)))
hitsOurs <- which(ours %in% theirs)
hitsTheirs <- which(theirs %in% ours )
hitsOurs
ours
theirs
theirs <- paste(startSites(g, is.sorted = T, keep.names = FALSE),
stopSites(g, is.sorted = T, keep.names = FALSE),
seqnamesPerGroup(g, F), strandPerGroup(g, keep.names = F))
hitsOurs <- which(ours %in% theirs)
hitsOurs
theirs
g
unique(ours)
ours <- paste(startsOur, stopsOur, chromosomeOurs, strandOur)
ours
theirs
#how many did we find ?
startsOur <- startSites(grl, is.sorted = T, keep.names = FALSE)
stopsOur <- stopSites(grl, is.sorted = T, keep.names = FALSE)
strandOur <- strandPerGroup(grl, keep.names = F)
chromosomeOurs <- seqnamesPerGroup(grl, F)
ours <- paste(startsOur, stopsOur, chromosomeOurs, strandOur)
theirs <- paste(startSites(g, is.sorted = T, keep.names = FALSE),
stopSites(g, is.sorted = T, keep.names = FALSE),
seqnamesPerGroup(g, F), strandPerGroup(g, keep.names = F))
hitsOurs <- which(ours %in% theirs)
hhitsOurs
hitsOurs
ours
grl
grl <- getUorfsInDb()
predicted <- readTable("finalCAGEuORFPrediction")$Matrix
which(c(1,0,1))
which(c(1,0,1) == 1)
grl <- grl[which(predicted) == 1)]
grl
#how many did we find ?
startsOur <- startSites(grl, is.sorted = T, keep.names = FALSE)
stopsOur <- stopSites(grl, is.sorted = T, keep.names = FALSE)
strandOur <- strandPerGroup(grl, keep.names = F)
chromosomeOurs <- seqnamesPerGroup(grl, F)
ours <- paste(startsOur, stopsOur, chromosomeOurs, strandOur)
which(predicted) == 1
theirs <- paste(startSites(g, is.sorted = T, keep.names = FALSE),
stopSites(g, is.sorted = T, keep.names = FALSE),
seqnamesPerGroup(g, F), strandPerGroup(g, keep.names = F))
which(ours %in% theirs)
grl[which(predicted == 1)]
length(ours)
hitsTheirs <- which(theirs %in% ours)
hitsTheirs
print(paste("From full list we find from our list:", hitsOurs))
print(paste("From full list we find from our list:", length(hitsOurs)))
hitsOurs
hitsOurs <- which(ours %in% theirs)
hitsOurs
print(paste("From full list we find from our list:", length(hitsOurs)))
length(g)
print(paste("From full list we find from our list:", length(hitsOurs), "that is:" length(hitsOurs) /length(g)))
print(paste("From full list we find from our list:", length(hitsOurs), "that is:", length(hitsOurs) /length(g)))
print(paste("From full list we find from our list:", length(hitsTheirs), "that is:", length(hitsTheirs) /length(g)))
grl
ours <- ours[which(predicted == 1)]
ours
hitsOurs <- which(ours %in% theirs)
length(hitsOurs)
length(ours)
length(theirs)
print(paste("From full list we find from our list:", length(hitsOurs), "that is:", length(hitsOurs) /length(g)))
ratio <- length(hitsOurs)
theirSearchSpace <- length(theirs)
ourSearchSpace <- length(ours)
grid.newpage()
library(ggplot2)
grid.newpage()
library(grid)
ggplot <- draw.pairwise.venn(ourSearchSpace,
theirSearchSpace,
1675, category = c("uORFome prediction", "McGillivray et al. prediction"),
lty = rep("blank", 2), fill = c("cyan", "red"),
alpha = rep(0.5, 2), cat.pos = c(0, 0),
cat.dist = rep(0.025, 2), cat.cex = c(1,1), cex = c(1,1,1))
library(VennDiagram)
ggplot <- draw.pairwise.venn(ourSearchSpace,
theirSearchSpace,
1675, category = c("uORFome prediction", "McGillivray et al. prediction"),
lty = rep("blank", 2), fill = c("cyan", "red"),
alpha = rep(0.5, 2), cat.pos = c(0, 0),
cat.dist = rep(0.025, 2), cat.cex = c(1,1), cex = c(1,1,1))
ggplot
library(gridExtra)
vennPred <- grid.arrange(gTree(children=ggplot), top=textGrob("Overlap between prediction pipelines", gp=gpar(fontsize=20,font=8)),
bottom="")
ggplot <- draw.pairwise.venn(ourSearchSpace,
theirSearchSpace,
ratio, category = c("uORFome prediction", "McGillivray et al. prediction"),
lty = rep("blank", 2), fill = c("cyan", "red"),
alpha = rep(0.5, 2), cat.pos = c(0, 0),
cat.dist = rep(0.025, 2), cat.cex = c(1,1), cex = c(1,1,1))
vennPred <- grid.arrange(gTree(children=ggplot), top=textGrob("Overlap between prediction pipelines", gp=gpar(fontsize=20,font=8)),
bottom="")
length(which(theirs %in% ours ))
print(paste("Mapping step found from theirs, total uORFs of:", length(hitsOurs), "that is:", length(hitsOurs) /length(g)))
print(paste("Mapping step found from theirs, total uORFs of:", length(hitsOurs), "that is:", length(hitsOurs) /length(g), "of full set"))
uorfData <- getAllSequenceFeaturesTable()
# Start codon metrics
uorfData <- getAllSequenceFeaturesTable()
StartCodons <- uorfData$StartCodons
table(StartCodons[hitsOurs])
# Using only predicted uORFs
predicted <- which(readTable("finalCAGEuORFPrediction")$Matrix == 1)
length(predicted)
#table(StartCodons[uniqueOrder][finalCagePred])
table(StartCodons[predicted])
tab1 <- table(StartCodons[hitsOurs])/sum(table(StartCodons[hitsOurs]))
#tab2 <- table(StartCodons$startCodon[uniqueOrder][finalCagePred])/sum(table(StartCodons$startCodon[uniqueOrder][finalCagePred]))
tab2 <- table(StartCodons[predicted])/sum(table(StartCodons[predicted]))
df <- data.frame(value = c(tab1, tab2), variable =c(names(tab1), names(tab2)),
pred  = c(rep("McGillivray et al. prediction", length(tab1)), rep("uORFome prediction", length(tab2))))
cstarts <- ggplot(df, aes(x=variable,y=value,fill=factor(pred)))+
geom_bar(stat="identity",position="dodge")+
scale_fill_discrete(name="Prediction pipeline")+
xlab("Start codon")+ylab("percentage")
library(cowplot)
plot_grid(vennPred,cstarts, align='hv',nrow=2,labels=c('A','B'))
a <- ORFik:::startCodons(g, is.sorted = T)
a
rm(a)
# Test their start codons:
codons <- ORFik:::startCodons(g, is.sorted = T)
fa
# Test their start codons:
getFasta()
codons <- ORFik:::startCodons(g, is.sorted = T)
startcods <- ORFik:::txSeqsFromFa(codons, fa, is.sorted = TRUE)
seqlevelsStyle(codons)
seqlevelsStyle(fa)
seqlevels(fa)
seqlevelsStyle(fa)
seqlevels(fa)
seqlevels(g)
seqlevelsStyle(startcods) <- seqlevelsStyle(fa)
seqlevelsStyle(codons) <- seqlevelsStyle(fa)
seqlevels(codons)
?seqlevelsStyle
mapSeqlevels(c("chrII", "chrIII", "chrM"), "NCBI")
mapSeqlevels(c("chrX), "UCSC")
mapSeqlevels(c("chrX"), "UCSC")
mapSeqlevels(c("X"), "UCSC")
seqlevelsStyle(codons) <- seqlevelsStyle(fa)
seqlevels(codons)
seqseqlevels(fa)
seqlevels(fa)
startcods <- ORFik:::txSeqsFromFa(codons[seqlevels(codons) != "chrX"], fa, is.sorted = TRUE)
codons[seqlevels(codons) != "chrX"]
seqlevels(codons[seqlevels(codons) != "chrX"])
unique(seqnames(codons[seqlevels(codons) != "chrX"]))
unique(seqnamesPerGroup(codons[seqlevels(codons) != "chrX"]))
unique(seqnamesPerGroup(codons[seqlevels(codons) != "chrX"], keep.names = F))
length(codons[seqnames(codons) != "chrX"])
sum(codons[seqnames(codons) != "chrX"])
codons[seqnames(codons) != "chrX"]
codons
codons[seqnamesPerGroup(codons, F) != "chrX"]
startcods <- ORFik:::txSeqsFromFa(codons[seqnamesPerGroup(codons, F) != "chrX"], fa, is.sorted = TRUE)
codons[seqnamesPerGroup(codons, F) %in% seqlevels(fa)]
startcods <- ORFik:::txSeqsFromFa(codons[seqnamesPerGroup(codons, F) %in% seqlevels(fa)], fa, is.sorted = TRUE)
startcods
unique(startcods)
seq(startcods)
as.character(startcods)
as.character(startcods, use.names = FALSE)
table(as.character(startcods, use.names = FALSE))
g
min(widthPerGroup(g,F))
which.min(widthPerGroup(g,F))
g[8]
1
basename("asasdasd/asdasdsad/asdasd.txt")
1
library(ORFik)
rm(list=ls())
library(uORFomePipe)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else stop("You do not have uORFomePipe installed")
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
source("./uORFome/Init_Variables.R") # Make this into experiments instead
rfp <- fimport("/export/valenfs/data/processed_data/Ribo-seq/fantom_human_bed/per_length/merged/Guo_H_2010.Human.HeLa.RPF.GRCh38.SRR065780.reads_merged.bed")
rfp
gtfdb
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df
View(df)
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
View(df)
rm(list=ls())
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else stop("You do not have uORFomePipe installed")
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
source("./uORFome/Init_Variables.R") # Make this into experiments instead
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
rm(list=ls())
updateORFik()
1
2
3
1
2
3
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else stop("You do not have uORFomePipe installed")
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
source("./uORFome/Init_Variables.R") # Make this into experiments instead
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
rm(list=ls())
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else stop("You do not have uORFomePipe installed")
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
source("./uORFome/Init_Variables.R") # Make this into experiments instead
df <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
rm(df)
# Create experiments
df.rfp <- create.experiment(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
# Create experiments
df.rfp <- create.experimentl(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
# Create experiments
#df.rfp <- create.experimentl(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df.rfp <- read.experimentl("uORFome_rfp")
# Create experiments
df.rfp <- create.experimentl(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
View(df.rfp)
# Create experiments
df.rfp <- create.experimentl(dir = rfpFolder ,exper = "uORFome_rfp1", txdb = gtfdb, fa = faiName)
rnaFolder
# Create experiments
#df.rfp <- create.experimentl(dir = rfpFolder ,exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df.rfp <- read.experimentl("uORFome_rfp")
df.rfp
# Create experiments
#df.rfp <- create.experimentl(dir = rfpFolder, exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df.rna <- create.experimentl(dir = rnaFolder, exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
rnaFolder
rnaFolder
matchTable <- load("matching_rna_ribo.rdata")
getwd()
df.rfp <- read.experimentl("uORFome_rfp")
View(df.rfp)
df.rfp
# now do per tissue true/false
rnaSamples <- getRiboRNAInfoTable()
rnaSamples
getRiboRNAInfoTable()
RNA <- readTable("RNAfpkm")
df.rfp
View(create.experimentl)
rnaSamples <- getRiboRNAInfoTable()
rnaSamples
rm(list=ls())
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else stop("You do not have uORFomePipe installed")
setwd("/export/valenfs/projects/uORFome/RCode1/") #!! set this path as codeFolder
source("./uORFome/Init_Variables.R") # Make this into experiments instead
# Create experiments
#df.rfp <- create.experimentl(dir = rfpFolder, exper = "uORFome_rfp", txdb = gtfdb, fa = faiName)
df.rfp <- read.experimentl("uORFome_rfp")
rnaSamples <- getRiboRNAInfoTable()
df.rna <- create.experimentl(dir = rnaFolder, exper = "uORFome_rna", txdb = gtfdb, fa = faiName)
rnaFolder
