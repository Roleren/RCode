a[a$reverse, ]
a[reverse, ]
a
a[reverse == T, ]
a[a$reverse == T, ]
class(a)
a[a$reverse == T, ]
a[a$reverse == T]
a
a[reverse == T]
a[reverse == T,]
class(a)
a$a
a[a == T,]
a[a,]
a[a == T,]
a[a$a == T,]
a <- data.table(reverse = c(T, F))
a[reverse,]
a[reverse = T,]
a[reverse == T,]
a[reverse == T,]$reverse
a[reverse == T,]$reverse <- F
a
a[reverse == T,]
a[reverse == T,] <- "a"
a
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
txdb_file <- "/export/valenfs/data/references/Rnor_6.0_rat/Rnor_6.0_genomic_ensembl.gtf.db"
fa <- "/export/valenfs/data/references/Rnor_6.0_rat/Rnor_6.0.dna.toplevel.fa"
create.experimentl(exper = "Preeti_RNA",
dir = "/export/valenfs/data/processed_data/RNA-seq/Preeti_Jain_2020_Rattus_norvegicus/aligned",
txdb = txdb_file, fa = fa, pairedEndBam = c(F, rep(T, 5)))
df.rna <- read.experimentl("Preeti_RNA")
updateORFik()
1
df.rna
filepath(df.rna, "default")
class(filepath(df.rna, "default"))
df.rna <- read.experimentl("Preeti_RNA")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna <- read.experimentl("Preeti_RNA")
filepath(df.rna, "default")
df.rna
df.rna$reverse
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna
filepath(df.rna, "default")
ORFik::QCreport(df.rna)
updateORFik()
updateORFik()
1
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
txdb_file <- "/export/valenfs/data/references/Rnor_6.0_rat/Rnor_6.0_genomic_ensembl.gtf.db"
fa <- "/export/valenfs/data/references/Rnor_6.0_rat/Rnor_6.0.dna.toplevel.fa"
df.rna <- read.experimentl("Preeti_RNA")
ORFik::QCreport(df.rna)
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna <- read.experimentl("Preeti_RNA")
df.rna
ORFik::QCreport(df.rna)
updateORFik()
detach("package:ORFik", unload = TRUE)
detach("package:ORFikPipeline", unload = TRUE)
library(ORFikPipeline)
library(ORFik)
library(ORFik)
View(readWidths)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
rm(list=ls())
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna <- read.experimentl("Preeti_RNA")
ORFik::QCreport(df.rna)
save.image("/export/valenfs/projects/uORFome/RCode1/Preeti_Riboseq/RNAseqSession.RData")
gr <- RNA_NMDA_r1
gr
starts <- if (is(gr, "GAlignmentPairs")) {
start(GenomicAlignments::first(gr))
} else  start(gr)
ends <- if (is(gr, "GAlignmentPairs")) {
end(GenomicAlignments::last(gr))
} else  end(gr)
starts[1]
ends[1]
any(starts > ends)
head(which(starts > ends), 5)
gr[13]
ends[13]
starts[13]
countOverlaps(gr[13], mrna)
any((strand(gr) == "+") & ends > starts)
any((strand(gr) == "+") & starts > ends)
any((strand(gr) == "-") & starts > ends)
min(starts - ends)
any((strand(gr) == "-") & starts > ends)
all((strand(gr) == "-") & starts > ends)
any((strand(gr) == "+") & starts > ends)
all((strand(gr) == "+") & ends > starts)
any((strand(gr) == "+") & ends > starts)
all((strand(gr) == "+") & ends > starts)
any((strand(gr) == "+") & ends < starts)
any((strand(gr) == "+") & ends == starts)
all((strand(gr) == "+") & ends > starts)
any((strand(gr) == "+") & ends > starts)
any((strand(gr) == "+") & ends == starts)
any((strand(gr) == "+") & ends < starts)
any((strand(gr) == "+") & ends > starts)
all((strand(gr) == "+") & ends > starts)
pos <- gr[(strand(gr) == "+")]
neg <- gr[(strand(gr) == "-")]
pos
all(start(GenomicAlignments::first(pos)) > end(GenomicAlignments::last(pos)))
any(start(GenomicAlignments::first(pos)) > end(GenomicAlignments::last(pos)))
all(end(GenomicAlignments::last(pos)) > start(GenomicAlignments::first(pos)))
all(end(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
neg(end(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
any(end(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
all(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
all(start(GenomicAlignments::last(neg)) < start(GenomicAlignments::first(neg)))
all(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
any(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
any(start(GenomicAlignments::last(neg)) < start(GenomicAlignments::first(neg)))
any(start(GenomicAlignments::last(neg)) == start(GenomicAlignments::first(neg)))
head(which(start(GenomicAlignments::last(neg)) == start(GenomicAlignments::first(neg))))
neg[25]
any(start(GenomicAlignments::last(neg)) == start(GenomicAlignments::first(neg)))
any(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))
any(start(GenomicAlignments::last(neg)) < start(GenomicAlignments::first(neg)))
all(start(GenomicAlignments::last(neg)) <= start(GenomicAlignments::first(neg)))
gr
all(start(GenomicAlignments::last(neg)) <= start(GenomicAlignments::first(neg)))
head(which(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg))))
neg[2700]
max(start(GenomicAlignments::last(neg)) > start(GenomicAlignments::first(neg)))[1:3]
max(start(GenomicAlignments::last(neg)), start(GenomicAlignments::first(neg)))[1:3]
max(start(GenomicAlignments::first(neg)), start(GenomicAlignments::last(neg)))[1:3]
max(c(1,2), c(1,3))
max(list(c(1,2), c(1,3)))
max(list(c(1,2), c(1,3)))
dt <- data.table(first = start(GenomicAlignments::first(neg)), last = start(GenomicAlignments::last(neg)))
dt
dt <- data.table(first.start = start(GenomicAlignments::first(gr)), last.start = start(GenomicAlignments::last(gr)),
first.end = end(GenomicAlignments::first(gr)), last.end = end(GenomicAlignments::last(gr)))
dt
iranges(gr)[1]
Iranges(gr)[1]
ranges(gr)[1]
gr[1]
gr[29]
max(width(ranges(gr)))
min(width(ranges(gr)))
rowMins(dt)[1]
dt[,row.min:=pmin(first.start, last.start, first.end, last.end)]
dt
dt[,row.max:=pmax(first.start, last.start, first.end, last.end)]
dt
all(start(ranges(gr)) == dt$row.min)
all(end(ranges(gr)) == dt$row.max)
all(start(ranges(gr)) == start(granges(gr)))
system.time(ranges(gr))
system.time(dt <- data.table(first.start = start(GenomicAlignments::first(gr)), last.start = start(GenomicAlignments::last(gr)),
first.end = end(GenomicAlignments::first(gr)), last.end = end(GenomicAlignments::last(gr))))
ranges(IRanges(1,3))
start(ranges(gr))[1]
gr[2]
start(ranges(gr))[2]
gr[1]
min(width(ranges(gr)))
which.min(width(ranges(gr)))
gr[4447180]
rm(list=ls())
updateORFik()
library(Rsubread)
Rsubread::buildindex(basename = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
reference = "/export/valenfs/data/references/Rnor_6.0_rat/Rattus_norvegicus.Rnor_6.0.dna.toplevel.fa",
nthreads = 60)
BiocManager::install("Rsubread")
library(BiocManager)
library(Rsubread)
version(Rsubread)
version("Rsubread")
??Rsubread
?Rsubread
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
?Rsubread::buildindex
library(Rsubread)
dir.create("/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/", recursive = TRUE)
dir.create("/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/", recursive = TRUE, showWarnings = FALSE)
Rsubread::buildindex(basename = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
reference = "/export/valenfs/data/references/Rnor_6.0_rat/Escherichia_virus_phiX174_genomic_refseq.fna",
nthreads = 60)
Rsubread::buildindex(basename = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
reference = "/export/valenfs/data/references/Rnor_6.0_rat/Escherichia_virus_phiX174_genomic_refseq.fna")
Rsubread::buildindex(basename = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
reference = "/export/valenfs/data/references/Rnor_6.0_rat/rn6-mature-tRNAs.fa")
Rsubread::buildindex(basename = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
reference = "/export/valenfs/data/references/Rnor_6.0_rat/NONCODE_ncRNA_rat.fa")
# Took 1.5 minutes
dir.create("/export/valenfs/data/processed_data/Ribo-seq/testest1/", recursive = TRUE, showWarnings = FALSE)
Rsubread::align(index = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/",
readfile1 = "/export/valenfs/data/raw_data/Ribo-Seq/Preeti_Jain_2020_Rattus_norvegicus/DHPG_set6_S3_R1_001.fastq.gz",
output_file = "/export/valenfs/data/processed_data/Ribo-seq/testest/DHPG_set6_S3_R1_001.bam",
nthreads = 90)
?Rsubread::align
Rsubread::align(index = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/",
readfile1 = "/export/valenfs/data/raw_data/Ribo-Seq/Preeti_Jain_2020_Rattus_norvegicus/DHPG_set6_S3_R1_001.fastq.gz",
output_file = "/export/valenfs/data/processed_data/Ribo-seq/testest1/DHPG_set6_S3_R1_001.bam",
nthreads = 90)
Rsubread::align(index = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/",
readfile1 = "/export/valenfs/data/raw_data/Ribo-Seq/Preeti_Jain_2020_Rattus_norvegicus/DHPG_set6_S3_R1_001.fastq.gz",
output_file = "/export/valenfs/data/processed_data/Ribo-seq/testest1/DHPG_set6_S3_R1_001.bam",
nthreads = 64)
Rsubread::align(index = "/export/valenfs/data/references/Rnor_6.0_rat/Rsubread-index/test_index",
readfile1 = "/export/valenfs/data/raw_data/Ribo-Seq/Preeti_Jain_2020_Rattus_norvegicus/DHPG_set6_S3_R1_001.fastq.gz",
output_file = "/export/valenfs/data/processed_data/Ribo-seq/testest1/DHPG_set6_S3_R1_001.bam",
nthreads = 64)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# QC report (RNA-seq & Ribo-seq)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
df.rfp <- read.experimentl("Preeti_RFP")
a <- ORFik:::loadTranscriptType(df, "lincRNA")
a <- ORFik:::loadTranscriptType(df.rfp@txdb, "lincRNA")
txdb <- loadTxdb(df.rfp)
df.rfp@txdb
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# QC report (RNA-seq & Ribo-seq)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
df.rfp <- read.experimentl("Preeti_RFP")
df.rfp
a <- ORFik:::loadTranscriptType(df.rfp@txdb, "lincRNA")
txdb <- loadTxdb(df.rfp)
txdb
a <- import("/export/valenfs/data/references/Rnor_6.0_rat/Rattus_norvegicus.Rnor_6.0.100_ensembl.gtf")
txdb
tools::file_ext(txdb)
class(txdb)
updateORFik()
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
updateORFik()
1
a <- fimport("/export/valenfs/data/processed_data/Ribo-seq/testest1/DHPG_set6_S3_R1_001.bam")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
a <- fimport("/export/valenfs/data/processed_data/Ribo-seq/testest1/DHPG_set6_S3_R1_001.bam")
a
df.rfp <- read.experimentl("Preeti_RFP")
lincs <- ORFik:::loadTranscriptType(df, part = "lincRNA")
lincs <- ORFik:::loadTranscriptType(df.rfp, part = "lincRNA")
df.rfp
txdb <- loadTxdb(df.rfp)
lincs <- ORFik:::loadTranscriptType(txdb, part = "lincRNA")
lincs <- ORFik:::importGtfFromTxdb(txdb)
lincs
type <- lincs
part <- "lincRNA"
valids <- type[grep(x = type$transcript_biotype, pattern = part)]
valids
if (length(valids) == 0) stop("found no valid transcript of type", part)
tx <- NULL
tx <- loadRegion(type)
updateORFik()
1
1
1
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
a
df.rfp <- read.experimentl("Preeti_RFP")
txdb <- loadTxdb(df.rfp)
ncrnas <- ORFik:::loadTranscriptType(txdb, part = "lincRNA")
ncrnas
countOverlaps(ncrnas, a)
ncrnas <- ORFik:::loadTranscriptType(df.rfp, part = "lincRNA")
ncrnas <- ORFik:::loadTranscriptType(df.rfp, part = "lincRNA")
df.rfp
ncrnas <- ORFik:::loadTranscriptType(df.rfp@txdb, part = "lincRNA")
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
txdb_file <- paste0(annotations["gtf"], ".db")
fa <- annotations["genome"]
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Download annotation (Rnor 6.0)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Custome contaminant genomes: phix, ncRNA, (rRNA and tRNA download manually)
annotations <- getGenomeAndFasta(organism = "Rattus norvegicus",
output.dir = "/export/valenfs/data/references/Rnor_6.0_rat",
phix = TRUE, ncRNA = "rat",
tRNA = "/export/valenfs/data/references/Rnor_6.0_rat/rn6-mature-tRNAs.fa",
rRNA = "/export/valenfs/data/references/rrna/SILVA_119_bothSURef.fasta")
txdb_file <- paste0(annotations["gtf"], ".db")
fa <- annotations["genome"]
gtf
txdb_file
fa <- annotations["genome"]
fa
create.experimentl(exper = "Preeti_RNA",
dir = "/export/valenfs/data/processed_data/RNA-seq/Preeti_Jain_2020_Rattus_norvegicus/aligned",
txdb = txdb_file, fa = fa) #pairedEndBam = c(T, rep(T, 5))
create.experimentl(exper = "Preeti_RNA",
dir = "/export/valenfs/data/processed_data/RNA-seq/Preeti_Jain_2020_Rattus_norvegicus/aligned",
txdb = txdb_file, fa = fa, pairedEndBam = TRUE)
df.rna <- read.experimentl("Preeti_RNA")
df.rna
ORFik:::organism.df(df.rna)
df.rna <- read.experimentl("Preeti_RNA")
df.rna
ORFik::QCreport(df.rna)
fread("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")
fread("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[5,2]
fread("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[2,5]
fread("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[6,2]
as.character(fread("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[6,2])
as.character(read.csv2("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[6,2])
as.character(read.csv2("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv"))
read.csv2("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")
as.character(read.csv2("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv")[2,])
info <- read.table("/export/valenfs/data/processed_data/experiment_tables_for_R/Preeti_RNA.csv", sep = ",", nrows = 3, stringsAsFactors = FALSE)
info
info[1,5]
info[2,5]
info[1,5]
info[1,4]
info[1,4] %in% c(NA)
info[1,4] %in% c(NA, "")
info[1,5] %in% c(NA, "")
debug(fimport)
outputLibs(df.rna)
df.rna
info[1,5]
info[2,5]
info[2,5:6]
info[2,5]
info[2,6]
info[2:5:6]
info[2, 5:6]
info[2, seq(5, 6)]
1
2
3
rm(list=ls())
updateORFik()
1
1
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Create ORFik experiments of libraries
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
txdb_file <- "/export/valenfs/data/references/Rnor_6.0_rat/Rattus_norvegicus.Rnor_6.0.100_ensembl.gtf.db"
fa <- "/export/valenfs/data/references/Rnor_6.0_rat/Rattus_norvegicus.Rnor_6.0.dna.toplevel.fa"
df.rna <- read.experimentl("Preeti_RNA")
df.rna
organism.df(df.rna)
ORFik::QCreport(df.rna)
df.rna <- read.experimentl("Preeti_RNA")
df.rna
filepath(df.rna, "default")
rm(list=ls())
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna <- read.experimentl("Preeti_RNA")
df.rna
ORFik::QCreport(df.rna)
RNA_WT_r1
save.image("/export/valenfs/projects/uORFome/RCode1/Preeti_Riboseq/RNAseqSession.RData")
updateORFik()
load("/export/valenfs/projects/uORFome/RCode1/Preeti_Riboseq/RNAseqSession.RData")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
df.rna <- read.experimentl("Preeti_RNA")
ORFik::QCreport(df.rna)
updateORFik()
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INFO
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Pre-Analysis data of Ribo-seq made by Preeti, May 2020
library(ORFikPipeline)
load("/export/valenfs/projects/uORFome/RCode1/Preeti_Riboseq/RNAseqSession.RData")
df.rna <- read.experimentl("Preeti_RNA")
df.rna
organism.df(df.rna)
ORFik::QCreport(df.rna)
1
1
?file.remove
1
1
ORFik:::transcriptWindow1(df = df.rna, idName = "fullReads", outdir = paste0(dirname(df.rna$filepath[1]), "/QC_STATS/"))
rm(list=ls())
updateORFik()
#2. Find new cage leaders
#3. Find candidate uORFs (possible by sequence)
#4. Create unique uORF ID's
#5. Create database objects
#6. Insert into database Ribo-seq, RNA-seq & Sequence features
#7. Predict uORFs from features
#8. Analysis and plots
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
library(uORFomePipe);library(ORFikPipeline)
#devtools::document(pkg = "/export/valenfs/projects/Hakon/uORFomePipe/")
#devtools::install("/export/valenfs/projects/Hakon/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
df.cage <- NULL
df.rfp  <- read.experimentl("zf_baz14_RFP") # RNA-seq is optional, but makes results better
df.rna  <- read.experimentl("zf_baz14_RNA")
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/ORFik_paper/artificial_1000",
df.rfp, df.rna, df.cage,
organism = "Danio rerio", mode = "ORF") # <- scientific name for organism, will let you know if you misspelled
}
rm(list=ls())
#2. Find new cage leaders
#3. Find candidate uORFs (possible by sequence)
#4. Create unique uORF ID's
#5. Create database objects
#6. Insert into database Ribo-seq, RNA-seq & Sequence features
#7. Predict uORFs from features
#8. Analysis and plots
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
library(uORFomePipe);library(ORFikPipeline)
#devtools::document(pkg = "/export/valenfs/projects/Hakon/uORFomePipe/")
#devtools::install("/export/valenfs/projects/Hakon/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
df.cage <- NULL
df.rfp  <- read.experimentl("zf_baz14_RFP") # RNA-seq is optional, but makes results better
df.rna  <- read.experimentl("zf_baz14_RNA")
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/ORFik_paper/artificial_1000_2",
df.rfp, df.rna, df.cage,
organism = "Danio rerio", mode = "ORF") # <- scientific name for organism, will let you know if you misspelled
}
rm(list=ls())
library(devtools)
?install_github
devtools::document()
updateORFik()
devtools::document()
devtools::document()
